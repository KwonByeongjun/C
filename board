#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
board_renderer.py

Raspberry Pi RGB Matrix P3.0 64×64 모듈을 이용해, 8×8 백혈구 게임 보드를 표시하고
“수 두기(update_cell)”만 호출하면 해당 칸만 효율적으로 업데이트해 주는 예제입니다.

- 각 칸은 8×8 픽셀로 매핑되어 있고,
- 빈 칸: 검정(0,0,0) / 레드(내 백혈구): 빨강(255,0,0) / 블루(상대 세균): 파랑(0,0,255)
- 그리드 선: 짙은 회색(50,50,50)으로 표시
"""

import sys
import time
from rgbmatrix import RGBMatrix, RGBMatrixOptions, graphics

# ===============================
# 설정 옵션: Matrix 초기화
# ===============================
options = RGBMatrixOptions()
options.rows = 64        # 패널 세로 픽셀 수
options.cols = 64        # 패널 가로 픽셀 수
options.chain_length = 1 # 패널 체인 수 (여기서는 1)
options.parallel = 1     # 병렬 연결 수 (여기선 1)
# 하드웨어 매핑: 사용 중인 Hat 종류에 따라 조정 ('adafruit-hat', 'adafruit-hat-pwm', 'regular' 등)
options.hardware_mapping = 'adafruit-hat'

matrix = RGBMatrix(options=options)
canvas = matrix.CreateFrameCanvas()
width = canvas.width   # 64
height = canvas.height # 64

# ===============================
# 게임 보드 변수
# ===============================
BOARD_SIZE = 8            # 논리적 보드 크기
CELL_PIX = width // BOARD_SIZE  # 칸당 픽셀 크기 = 8

# 8×8 보드 상태 저장: '.'(빈), 'R'(레드), 'B'(블루)
board = [['.' for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]

# 색상 정의
COLOR_EMPTY = graphics.Color(0, 0, 0)        # 빈 칸 = 검정
COLOR_RED   = graphics.Color(255, 0, 0)      # 레드 = 빨강
COLOR_BLUE  = graphics.Color(0, 0, 255)      # 블루 = 파랑
COLOR_GRID  = graphics.Color(50, 50, 50)     # 그리드 선 = 짙은 회색

# ===============================
# 보드 전체를 한 번 그리는 함수
# ===============================
def draw_full_board():
    """
    board[][] 상태를 토대로 캔버스 전체(64×64)를 다시 그립니다.
    1) 전체를 검정으로 지운 뒤
    2) 각 칸(cell)에 대응하는 8×8 블록을 채우고
    3) 그리드 선(칸 경계)을 그립니다.
    """
    # 1) 전체 Clear
    canvas.Fill(0, 0, 0)

    # 2) 칸별 색 채우기
    for r in range(BOARD_SIZE):
        for c in range(BOARD_SIZE):
            x0 = c * CELL_PIX
            y0 = r * CELL_PIX
            ch = board[r][c]
            if ch == 'R':
                _fill_cell(x0, y0, COLOR_RED)
            elif ch == 'B':
                _fill_cell(x0, y0, COLOR_BLUE)
            # 빈 칸은 검정(0,0,0)으로 이미 초기화되어 있음

    # 3) 그리드 선(칸 경계) 그리기
    for i in range(BOARD_SIZE + 1):
        y = i * CELL_PIX
        x = i * CELL_PIX
        # 가로선: (x=0..63, y=i*8)
        canvas.DrawLine(0, y, width - 1, y, COLOR_GRID)
        # 세로선: (x=i*8, y=0..63)
        canvas.DrawLine(x, 0, x, height - 1, COLOR_GRID)

    # 화면에 반영
    matrix.SwapOnVSync(canvas)

# ===============================
# 단일 칸만 업데이트하는 함수
# ===============================
def update_cell(row, col, ch):
    """
    특정 (row, col)에 ch('R'/'B'/'.')를 놓고, 해당 위치(8×8 픽셀 블록)만 갱신.
    """
    # 1) board 상태 갱신
    board[row][col] = ch

    # 2) 해당 칸 픽셀 좌표 계산
    x0 = col * CELL_PIX
    y0 = row * CELL_PIX

    # 3) 칸 8×8 영역을 지우고(검정) → 새로운 색으로 채우기
    if ch == 'R':
        _fill_cell(x0, y0, COLOR_RED)
    elif ch == 'B':
        _fill_cell(x0, y0, COLOR_BLUE)
    else:
        _fill_cell(x0, y0, COLOR_EMPTY)

    # 4) 해당 칸 경계선 다시 그리기 (심플하게 상단/좌측/우측/하단 모두 그려도 무방)
    x1 = x0 + CELL_PIX - 1
    y1 = y0 + CELL_PIX - 1
    # 상단
    canvas.DrawLine(x0, y0, x1, y0, COLOR_GRID)
    # 좌측
    canvas.DrawLine(x0, y0, x0, y1, COLOR_GRID)
    # 우측
    canvas.DrawLine(x1, y0, x1, y1, COLOR_GRID)
    # 하단
    canvas.DrawLine(x0, y1, x1, y1, COLOR_GRID)

    # 5) 화면에 즉시 반영
    matrix.SwapOnVSync(canvas)

# ===============================
# 헬퍼: 칸 채우기
# ===============================
def _fill_cell(x0, y0, color):
    """
    (x0, y0) 좌상단부터 CELL_PIX × CELL_PIX 영역을 color로 채움.
    """
    for dy in range(CELL_PIX):
        for dx in range(CELL_PIX):
            canvas.SetPixel(x0 + dx, y0 + dy, color.red, color.green, color.blue)

# ===============================
# 메인 예시: 전체 그리기 + 무작위 수 두기
# ===============================
if __name__ == "__main__":
    try:
        # 1) 초기 보드 전체 그리기
        draw_full_board()

        # 2) 예시 루프: 1초마다 무작위 빈 칸에 R/B 순서대로 두기
        import random
        turn = 0
        while True:
            time.sleep(1.0)
            r = random.randint(0, BOARD_SIZE - 1)
            c = random.randint(0, BOARD_SIZE - 1)
            if board[r][c] != '.':
                continue
            if turn % 2 == 0:
                update_cell(r, c, 'R')
            else:
                update_cell(r, c, 'B')
            turn += 1

    except KeyboardInterrupt:
        # Ctrl+C로 종료 시 캔버스 초기화 후 종료
        canvas.Clear()
        sys.exit(0)
